version: "3.9"
services:

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - 9000:9000

  prometheus:
    image: prom/prometheus:v2.40.6
    container_name: prometheus
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"

  promtail:
    image: grafana/promtail:2.7.0
    container_name: promtail
    volumes:
      - ./observability/promtail/promtail-docker-config.yaml:/etc/promtail/docker-config.yaml
      - ./logs:/var/log
    command: "--config.file=/etc/promtail/docker-config.yaml"

  loki:
    image: grafana/loki:2.7.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana:9.3.1
    container_name: grafana
    volumes:
      - ./observability/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./observability/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./observability/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki

  jaeger:
    image: jaegertracing/all-in-one:1.21.0
    container_name: monitoring-jaeger
    command: "--collector.zipkin.http-port=9411 --log-level=debug"
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"

  mongoexporter:
    container_name: mongoexporter
#    image: bitnami/mongodb-exporter
    image: "percona/mongodb_exporter:0.32.0"
    command:
      - "--collect-all"
      - "--compatible-mode"
    ports:
      - "9216:9216"
    environment:
      MONGODB_URI: mongodb://exporter:password@mongodb:27017

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.3.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  mongodb:
    container_name: mongodb
    image: mongo:4.2.21
    restart: always
    environment:
      MONGO_INITDB_DATABASE: bug-tracker
    ports:
      - "27017:27017"
    volumes:
      - ./001_init.js:/docker-entrypoint-initdb.d/001_init.js:ro

  user-service:
    image: "user-service:1.0.0"
    container_name: user-service
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "500M"
    volumes:
      - ./logs:/logs
    ports:
      - "8081:8080"
      - "9091:9090"

  project-service:
    image: "project-service:1.0.0"
    container_name: project-service
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "500M"
    volumes:
      - ./logs:/logs
    ports:
      - "8082:8080"
      - "9092:9090"

  issue-service:
    image: "issue-service:1.0.0"
    container_name: issue-service
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "500M"
    volumes:
      - ./logs:/logs
    ports:
      - "8083:8080"
      - "9093:9090"